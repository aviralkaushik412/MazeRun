// levels.js - Maze level definitions organized by difficulty
// # = wall, . = path, S = start, E = exit

const MAZE_LEVELS = {
  easy: [
    // Easy Level 1 - Simple straight path
    {
      id: 'easy_1',
      name: 'First Steps',
      layout: [
        '###########',
        '#S........#',
        '#.########',
        '#.........#',
        '########.##',
        '#........E#',
        '###########'
      ]
    },
    // Easy Level 2 - Basic turns
    {
      id: 'easy_2',
      name: 'Learning Curves',
      layout: [
        '###########',
        '#S...#....#',
        '###.#.##..#',
        '#...#.....#',
        '#.#####.###',
        '#.....#...#',
        '###.###.#.#',
        '#...#...#E#',
        '###########'
      ]
    },
    // Easy Level 3 - Multiple paths
    {
      id: 'easy_3',
      name: 'Choose Your Path',
      layout: [
        '#############',
        '#S..........#',
        '#.########..#',
        '#.#......#..#',
        '#.#.####.#..#',
        '#.#.#..#.#..#',
        '#...#..#....#',
        '#######.#####',
        '#.........E.#',
        '#############'
      ]
    },
    // Easy Level 4 - Wider passages
    {
      id: 'easy_4',
      name: 'Open Spaces',
      layout: [
        '###########',
        '#S........#',
        '#..####...#',
        '#..#..#...#',
        '#..#..#...#',
        '#..#......#',
        '#..####.###',
        '#.......E.#',
        '###########'
      ]
    },
    // Easy Level 5 - Final easy challenge
    {
      id: 'easy_5',
      name: 'Easy Master',
      layout: [
        '###############',
        '#S............#',
        '#.##########..#',
        '#.#........#..#',
        '#.#.######.#..#',
        '#.#.#....#.#..#',
        '#.#.#.##.#.#..#',
        '#.#...##.#....#',
        '#.#######.#####',
        '#.........E...#',
        '###############'
      ]
    }
  ],

  medium: [
    // Medium Level 1 - Narrow passages
    {
      id: 'medium_1',
      name: 'Tight Squeeze',
      layout: [
        '#############',
        '#S..#......#.#',
        '#.#.#.####.#.#',
        '#.#...#..#...#',
        '#.#####.###.##',
        '#.....#.....E#',
        '###.####.#####',
        '#...#........#',
        '##############'
      ]
    },
    // Medium Level 2 - Dead ends
    {
      id: 'medium_2',
      name: 'Dead End Valley',
      layout: [
        '###############',
        '#S............#',
        '###.#########.#',
        '#...#.......#.#',
        '#.###.#####.#.#',
        '#.....#...#.#.#',
        '#####.#.#.#.#.#',
        '#.....#.#...#.#',
        '#.#####.#####.#',
        '#.............#',
        '############E##',
        '###############'
      ]
    },
    // Medium Level 3 - Spiral design
    {
      id: 'medium_3',
      name: 'Spiral Challenge',
      layout: [
        '###############',
        '#S............#',
        '#.###########.#',
        '#.#.........#.#',
        '#.#.#######.#.#',
        '#.#.#.....#.#.#',
        '#.#.#.###.#.#.#',
        '#.#.#...#.#.#.#',
        '#.#.#####.#.#.#',
        '#.#.......#.#.#',
        '#.#########.#.#',
        '#...........#E#',
        '###############'
      ]
    },
    // Medium Level 4 - Multiple routes
    {
      id: 'medium_4',
      name: 'Crossroads',
      layout: [
        '###############',
        '#S..#........##',
        '#.#.#.######.##',
        '#.#...#....#..#',
        '#.#####.##.#..#',
        '#.......##.#..#',
        '###.#######.#.#',
        '#...#.......#.#',
        '#.###.#######.#',
        '#.............#',
        '############E##',
        '###############'
      ]
    },
    // Medium Level 5 - Complex navigation
    {
      id: 'medium_5',
      name: 'Medium Master',
      layout: [
        '#################',
        '#S......#.......#',
        '#.####.###.####.#',
        '#....#.....#....#',
        '####.#.###.#.####',
        '#....#.#.#.#....#',
        '#.####.#.#.####.#',
        '#......#.#......#',
        '########.########',
        '#......#.#......#',
        '#.####.#.#.####.#',
        '#....#.....#..E.#',
        '####.#######.####',
        '#...............#',
        '#################'
      ]
    }
  ],

  hard: [
    // Hard Level 1 - Tight corridors
    {
      id: 'hard_1',
      name: 'Narrow Escape',
      layout: [
        '#################',
        '#S..#.....#......#',
        '###.#.###.#.####.#',
        '#...#...#.#....#.#',
        '#.#####.#.##.#.#.#',
        '#.#...#.#....#.#.#',
        '#.#.#.#.####.#.#.#',
        '#...#.#......#...#',
        '#####.#########.##',
        '#.....#........E.#',
        '##################'
      ]
    },
    // Hard Level 2 - Maze within maze
    {
      id: 'hard_2',
      name: 'Inception',
      layout: [
        '###################',
        '#S................#',
        '#.###############.#',
        '#.#.............#.#',
        '#.#.###########.#.#',
        '#.#.#.........#.#.#',
        '#.#.#.#######.#.#.#',
        '#.#.#.#.....#.#.#.#',
        '#.#.#.#.###.#.#.#.#',
        '#.#.#.#.#E#.#.#.#.#',
        '#.#.#.#.###.#.#.#.#',
        '#.#.#.#.....#.#.#.#',
        '#.#.#.#######.#.#.#',
        '#.#.#.........#.#.#',
        '#.#.###########.#.#',
        '#.#.............#.#',
        '#.###############.#',
        '#.................#',
        '###################'
      ]
    },
    // Hard Level 3 - Lots of dead ends
    {
      id: 'hard_3',
      name: 'Deception Maze',
      layout: [
        '#################',
        '#S.#..........#.#',
        '#.###.#######.#.#',
        '#.....#.....#.#.#',
        '#####.#.###.#.#.#',
        '#...#.#.#.#.#.#.#',
        '#.#.#.#.#.#.#.#.#',
        '#.#.#.#.#.#.#.#.#',
        '#.#.#.#.#.#.#...#',
        '#.#.#.#.#.#.#.###',
        '#.#.#...#...#...#',
        '#.#.#########.#.#',
        '#.#...........#.#',
        '#.#############.#',
        '#..............E#',
        '#################'
      ]
    },
    // Hard Level 4 - Long winding path
    {
      id: 'hard_4',
      name: 'The Long Road',
      layout: [
        '###################',
        '#S................#',
        '##.##############.#',
        '#................##',
        '#.################',
        '#................##',
        '##.##############.#',
        '#................##',
        '#.################',
        '#................##',
        '##.##############.#',
        '#................##',
        '#.################',
        '#................##',
        '##.##############.#',
        '#................E#',
        '###################'
      ]
    },
    // Hard Level 5 - Ultimate challenge
    {
      id: 'hard_5',
      name: 'Hard Master',
      layout: [
        '#####################',
        '#S..................#',
        '#.#################.#',
        '#.#...............#.#',
        '#.#.#############.#.#',
        '#.#.#...........#.#.#',
        '#.#.#.#########.#.#.#',
        '#.#.#.#.......#.#.#.#',
        '#.#.#.#.#####.#.#.#.#',
        '#.#.#.#.#...#.#.#.#.#',
        '#.#.#.#.#.#.#.#.#.#.#',
        '#.#.#.#.#.#.#.#.#.#.#',
        '#.#.#.#.#.#E#.#.#.#.#',
        '#.#.#.#.#.###.#.#.#.#',
        '#.#.#.#.#.....#.#.#.#',
        '#.#.#.#.#######.#.#.#',
        '#.#.#.#.........#.#.#',
        '#.#.#.###########.#.#',
        '#.#.#.............#.#',
        '#.#.###############.#',
        '#...................#',
        '#####################'
      ]
    }
  ],

  expert: [
    // Expert Level 1 - Ultra complex
    {
      id: 'expert_1',
      name: 'Expert Entry',
      layout: [
        '#########################',
        '#S......................#',
        '#.#####################.#',
        '#.#...................#.#',
        '#.#.#################.#.#',
        '#.#.#...............#.#.#',
        '#.#.#.#############.#.#.#',
        '#.#.#.#...........#.#.#.#',
        '#.#.#.#.#########.#.#.#.#',
        '#.#.#.#.#.......#.#.#.#.#',
        '#.#.#.#.#.#####.#.#.#.#.#',
        '#.#.#.#.#.#...#.#.#.#.#.#',
        '#.#.#.#.#.#.#.#.#.#.#.#.#',
        '#.#.#.#.#.#.#E#.#.#.#.#.#',
        '#.#.#.#.#.#.###.#.#.#.#.#',
        '#.#.#.#.#.#.....#.#.#.#.#',
        '#.#.#.#.#.#######.#.#.#.#',
        '#.#.#.#.#.........#.#.#.#',
        '#.#.#.#.###########.#.#.#',
        '#.#.#.#.............#.#.#',
        '#.#.#.###############.#.#',
        '#.#.#.................#.#',
        '#.#.###################.#',
        '#.#.....................#',
        '#.#######################',
        '#.......................#',
        '#########################'
      ]
    },
    // Expert Level 2 - Massive maze
    {
      id: 'expert_2',
      name: 'The Labyrinth',
      layout: [
        '#########################',
        '#S.#...................#',
        '#.##.#################.#',
        '#....#...............#.#',
        '######.#############.#.#',
        '#......#...........#.#.#',
        '#.######.#########.#.#.#',
        '#.#......#.......#.#.#.#',
        '#.#.######.#####.#.#.#.#',
        '#.#.#......#...#.#.#.#.#',
        '#.#.#.######.#.#.#.#.#.#',
        '#.#.#.#......#.#.#.#.#.#',
        '#.#.#.#.######.#.#.#.#.#',
        '#.#.#.#.#......#.#.#.#.#',
        '#.#.#.#.#.######.#.#.#.#',
        '#.#.#.#.#.#......#.#.#.#',
        '#.#.#.#.#.#.######.#.#.#',
        '#.#.#.#.#.#.#......#.#.#',
        '#.#.#.#.#.#.#.######.#.#',
        '#.#.#.#.#.#.#.#......#.#',
        '#.#.#.#.#.#.#.#.####.#.#',
        '#.#.#.#.#.#.#.#....#.#.#',
        '#.#.#.#.#.#.#.####.#.#.#',
        '#.#.#.#.#.#.#......#...#',
        '#.#.#.#.#.#.############',
        '#...#...#...........E..#',
        '#########################'
      ]
    },
    // Expert Level 3 - The final boss
    {
      id: 'expert_3',
      name: 'Maze Master',
      layout: [
        '###########################',
        '#S........................#',
        '#.#######################.#',
        '#.#.....................#.#',
        '#.#.###################.#.#',
        '#.#.#.................#.#.#',
        '#.#.#.###############.#.#.#',
        '#.#.#.#.............#.#.#.#',
        '#.#.#.#.###########.#.#.#.#',
        '#.#.#.#.#.........#.#.#.#.#',
        '#.#.#.#.#.#######.#.#.#.#.#',
        '#.#.#.#.#.#.....#.#.#.#.#.#',
        '#.#.#.#.#.#.###.#.#.#.#.#.#',
        '#.#.#.#.#.#.#E#.#.#.#.#.#.#',
        '#.#.#.#.#.#.###.#.#.#.#.#.#',
        '#.#.#.#.#.#.....#.#.#.#.#.#',
        '#.#.#.#.#.#######.#.#.#.#.#',
        '#.#.#.#.#.........#.#.#.#.#',
        '#.#.#.#.###########.#.#.#.#',
        '#.#.#.#.............#.#.#.#',
        '#.#.#.###############.#.#.#',
        '#.#.#.................#.#.#',
        '#.#.###################.#.#',
        '#.#.....................#.#',
        '#.#######################.#',
        '#.........................#',
        '###########################'
      ]
    }
  ]
};

// Level management utilities
const LevelManager = {
  currentDifficulty: 'medium',
  currentLevelIndex: 0,

  // Get all difficulties
  getDifficulties() {
    return Object.keys(MAZE_LEVELS);
  },

  // Get levels for a specific difficulty
  getLevelsForDifficulty(difficulty) {
    return MAZE_LEVELS[difficulty] || [];
  },

  // Get a specific level
  getLevel(difficulty, levelIndex) {
    const levels = this.getLevelsForDifficulty(difficulty);
    return levels[levelIndex] || null;
  },

  // Get current level
  getCurrentLevel() {
    return this.getLevel(this.currentDifficulty, this.currentLevelIndex);
  },

  // Set current level
  setCurrentLevel(difficulty, levelIndex) {
    this.currentDifficulty = difficulty;
    this.currentLevelIndex = levelIndex;
  },

  // Get next level
  getNextLevel() {
    const levels = this.getLevelsForDifficulty(this.currentDifficulty);
    if (this.currentLevelIndex < levels.length - 1) {
      return this.getLevel(this.currentDifficulty, this.currentLevelIndex + 1);
    }
    
    // Move to next difficulty if available
    const difficulties = this.getDifficulties();
    const currentDiffIndex = difficulties.indexOf(this.currentDifficulty);
    if (currentDiffIndex < difficulties.length - 1) {
      const nextDifficulty = difficulties[currentDiffIndex + 1];
      return this.getLevel(nextDifficulty, 0);
    }
    
    return null; // No more levels
  },

  // Advance to next level
  advanceToNextLevel() {
    const levels = this.getLevelsForDifficulty(this.currentDifficulty);
    if (this.currentLevelIndex < levels.length - 1) {
      this.currentLevelIndex++;
      return true;
    }
    
    // Move to next difficulty
    const difficulties = this.getDifficulties();
    const currentDiffIndex = difficulties.indexOf(this.currentDifficulty);
    if (currentDiffIndex < difficulties.length - 1) {
      this.currentDifficulty = difficulties[currentDiffIndex + 1];
      this.currentLevelIndex = 0;
      return true;
    }
    
    return false; // No more levels
  },

  // Get level info
  getLevelInfo() {
    const level = this.getCurrentLevel();
    const levels = this.getLevelsForDifficulty(this.currentDifficulty);
    return {
      level: level,
      levelNumber: this.currentLevelIndex + 1,
      totalLevels: levels.length,
      difficulty: this.currentDifficulty,
      hasNext: this.getNextLevel() !== null
    };
  }
};

// Export for use in other files
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { MAZE_LEVELS, LevelManager };
}